(if (= (def? include.arr) 0) (
	(let include.arr 1)

	(include std/base)

	(let first
		(if (not (zero? (len (%%))))
				(% 0)))
		
	(let shift
		(if (not (zero? (len (%%))))
				(rm 0 (%%))))

	(let last
		(% (dec (len %%))))

	(let pop
		(rm (dec (len (%%)))
				(%%)))

	(let nshift
		(if (zero? (% 0))
				(shift (%%))
				(nshift (dec (% 0))
								(shift (shift (%%))))))

	(let npop
		(if (zero? (% 0))
				(shift (%%))
				(npop (dec (% 0))
								(shift (pop (%%))))))

	(let nfirst
		(npop (- (len (%%)) 1 (% 0))
						 (shift (%%))))

	(let nlast
		(nshift (- (len (%%)) 1 (% 0))
						(shift (%%))))

	(let reverse
		(each reverse.i (range (len (%%)))
					(% (- (len (%%)) 1 (reverse.i)))))

	(let slice
		(npop (- (% 1) (- (len (%%)) 2))
					(nshift (+ 2 (% 0)) (%%))))

	(let rslice (
		(nfirst (dec (% 0)) (nshift 2 (%%)))
		(nlast (- (len (%%)) (% 1) 2) (nshift 2 (%%)))))

	(let contains
		(or (each contains.i
							(shift (%%))
							(= (% contains.i) (% 0)))))

	(let find-all
		(each find-all.i (range 1 (len (%%)))
					(if (= (% (find-all.i))
								 (% 0))
							(find-all.i))))

	(let find
		(first (find (%%))))

))
