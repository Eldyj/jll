(if (= (def? include.arr) 0) (
	(let include.arr 1)

	(include std/base)

	(let first one rest
		(if (not (zero? (len (one))))
				(one)))
		
	(let shift _ res
		(if (not (zero? (len _))
				(res)))

	(let last arr
		(arg (dec (len arr))))

	(let pop arr
		(rm (dec (len arr))
				arr))

	(let nshift n arr
		(if (zero? n)
				(arr))
				(nshift (dec n)
								(shift arr)))

	(let npop n arr
		(if (zero? n)
				(arr)
				(npop (dec n)
							(pop arr))))

	(let nfirst n arr
		(npop (- (len arr)) n)
						 arr))

	(let nlast n arr
		(nshift (- (len arr) n)
						arr))

	(let reverse arr
		(each reverse.i (range (len arr))
					(arg (- (len arr) 1 (reverse.i)))))

	(let slice start off1 off2 arr
		(npop (- (off2) (len arr))
					(nshift off1 arr)))

	(let rslice start end arr (
		(nfirst (dec start) arr)
		(nlast (- (len arr) end) arr)))

	(let contains el arr
		(or (each contains.i arr
							(= contains.i el))))

	(let find-all el arr
		(each find-all.i (range 1 (inc (len arr)))
					(if (= (% (find-all.i))
								 el)
							(find-all.i))))

	(let find el arr
		(first (find el arr)))

))
