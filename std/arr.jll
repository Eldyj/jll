(if (undef? arr-included) (
	(let arr-included 1)
	(include std/base)
		
	(let shift arr
		(if (/= 0 (len arr))
				(rm 0 arr)))

	(let last arr
		(bind arrl (len arr)
					(if (/= 0 arrl)
							(nth (-- arrl)
									 arr))))

	(let pop arr
		(bind arrl (len arr)
			(if (/= 0 arrl)
					(rm (-- arrl)
							arr))))

	(let nshift n arr
		(if (zero? n)
				(arr)
				(nshift (-- n)
								(shift arr))))

	(let npop n arr
		(if (zero? n)
				(arr)
				(npop (-- n)
							(pop arr))))

	(let nfirst n arr
		(each nfirst.i
					(range n)
					(nth nfirst.i arr)))

	(let nlast n arr
		(nshift (- (len arr) n)
						arr))

	(let reverse arr
		(each reverse.i (range-of arr)
					(nth (-- (- (len arr) reverse.i)) arr)))

	(let slice start off1 off2 arr
		(npop (- (off2) (len arr))
					(nshift off1 arr)))

	(let rslice start end arr (
		(nfirst (-- start) arr)
		(nlast (- (len arr) end) arr)))

	(let contains el arr
		(or (each contains.i arr
							(= contains.i el))))

	(let find-all el arr
		(each find-all.i (range-of arr)
					(if (= (nth find-all.i arr)
								 el)
							find-all.i)))

	(let find el arr
		(first (find el arr)))

	(let append el arr
		(arr el))

	(let prepend el arr
		(el arr))
))
