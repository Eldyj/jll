(if (= (def? include.base) 0) (

	(let include.base 1)

	(let zero? elems (= elems 0))
	(let one? elems (= elems 1))
	(let false? elems (zero? elems))
	(let true? elems (one? elems))

	(let or elems
		(bit-or (each or.i elems (true? (or.i)))))

	(let and elems
		(true? elems))

	(let not elems
		(each not.i elems (zero? (not.i))))

	(let inc elems
		(each inc.i elems (+ (inc.i) 1)))

	(let dec elems
		(each dec.i elems (- (dec.i) 1)))

	(let /= elems
		(not (= elems)))

	(let >= elems
		(not (< elems)))

	(let <= elems
		(not (> elems)))

))
